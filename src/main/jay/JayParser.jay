%{
package org.autoimpl.parser;

import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.autoimpl.ErrorLogger;
import org.autoimpl.cst.Identifier;
import org.autoimpl.cst.MethodInvocation;
import org.autoimpl.cst.Position;
import org.autoimpl.cst.Specification;
import org.autoimpl.parser.jay.Input;
import org.autoimpl.parser.jay.SyntaxError;

public class JayParser {

    private Input input;
    private Specification specification;
    private List<MethodInvocation> statements;
    private ErrorLogger errorLogger;
    
    public JayParser(ErrorLogger errorLogger)
    {
        this.errorLogger = errorLogger;
    }
%}

%token IDENTIFIER
%token SPECIFICATION
%token END
%token EOL 10

%start grammar

%%

eols:
	| EOL eols

method_invocation:
	IDENTIFIER IDENTIFIER EOL {
		statements.add(new MethodInvocation((Identifier)$1, (Identifier)$2));
	}
	
statements:
	 | method_invocation statements

grammar:
    eols SPECIFICATION IDENTIFIER EOL {
		statements = new ArrayList<MethodInvocation>();
    } statements END {
    	specification = new Specification((Identifier)$3, statements);
    }
  

%%
    private static boolean contains(int[] tokens, int expected) {
        for (int token : tokens)
            if (token == expected)
                return true;
        return false;
    }

	private void yyerror(int[] expected) {
		errorLogger.logError(new Position(input.row(), input.column()),
				"missing " + whatIsMissing(expected));
	}

	private String whatIsMissing(int[] expected) {
		if (contains(expected, SPECIFICATION))
			return "'specification'";
		if (contains(expected, END))
			return "'end'";
		if (contains(expected, EOL))
			return "end-of-line";
		return "specification name";
	}
	
	public Specification parseFile(Reader reader) {
		try {
			input = new Scanner(reader, IDENTIFIER, createKeywords(),
					createPunctuation());
			yyparse(input);
		} catch (SyntaxError e) {
		} catch (IOException e) {
		}
		return specification;
	}

	private HashMap<Character, Integer> createPunctuation() {
		return new HashMap<Character, Integer>();
	}

	private HashMap<String, Integer> createKeywords() {
		HashMap<String, Integer> keywords = new HashMap<String, Integer>();
		keywords.put("specification", SPECIFICATION);
		keywords.put("end", END);
		return keywords;
	}
}